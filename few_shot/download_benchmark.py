import argparse, os, json, subprocess
from datetime import datetime
from tqdm import tqdm

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--dlfile', type=str, required=True, help='Path to outfile generated by prep_benchmark.py')
parser.add_argument('-t', '--tmpdir', type=str, required=True, help='Temporary directory where videos are downloaded')
parser.add_argument('-fps', '--output-fps', action='store_true', required=False, help='If provided, will write a JSON file with FPS info to `fps.json`. Useful for Qwen.')
args = parser.parse_args()
dlfile, tmp_dir = args.dlfile, args.tmpdir
if not os.path.isfile(dlfile): raise Exception('The provided downloads file (dlfile) does not exist.')
os.makedirs(tmp_dir, exist_ok=True)

# get list of clips (as identified by UUIDs) that are required for the benchmark
with open(dlfile, 'r') as f:
    urls: list[str] = json.load(f)
tails = [u.split('/')[-1] for u in urls]
uuids_list = [t.split('.')[0] for t in tails]
uuids = set(uuids_list)
if not (len(uuids) == len(uuids_list) == len(urls)):
    raise Exception('ERROR: duplicate UUIDs or misformatted URL.')
uuid_to_url_tail: dict[str, tuple[str, str]] = {uuids_list[i]: (urls[i], tails[i]) for i in range(len(uuids))}

# download the clips
vid_paths: dict[str, str] = {}
for unique in tqdm(uuids, desc="downloading clips"):
    url, tail = uuid_to_url_tail[unique]
    vid_path = os.path.join(tmp_dir, tail)
    vid_paths[unique] = vid_path
    if os.path.isfile(vid_path): continue
    gcs_url = "gs://" + url.split('https://storage.googleapis.com/')[-1]
    subprocess.run(['gcloud', 'storage', 'cp', gcs_url, vid_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

# output FPS for each video if asked to; used for Qwen
fps_info: dict[str, float] = {}
if args.output_fps:
    for unique in tqdm(uuids, desc="extracting fps info"):
        cmd = ['ffprobe', '-v', 'error', '-select_streams', 'v:0', '-show_entries', 'stream=avg_frame_rate', '-of', 'json', vid_paths[unique]]
        res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        data = json.loads(res.stdout)
        fps_fraction = data['streams'][0]['avg_frame_rate']
        num, denom = map(int, fps_fraction.split('/'))
        fps = round(num / denom, 2) if denom else 0.
        fps_info[unique] = fps
    now = datetime.now().strftime("%m-%d_%H-%M-%S")
    with open(f'fps_{now}.json', 'w') as f:
        json.dump(fps_info, f)